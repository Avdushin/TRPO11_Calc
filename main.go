package main

import (
	"errors"
	"fmt"
	"log"
	"math/rand"
	"os"

	"fyne.io/fyne"
	"fyne.io/fyne/app"
	"fyne.io/fyne/layout"
	"fyne.io/fyne/widget"
	"github.com/Knetic/govaluate"
)

const logPath = "logs/calc-log.log"

func main() {

	logger(logPath)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	a := app.New()
	// –Ω–∞—à–µ –æ–∫–æ—à–∫–æ
	w := a.NewWindow("–ö–∞–ª—å–∫—É–ª–µ–π—Ç–æ—Ä")

	// –ø–æ–ª–µ –≤–≤–æ–¥–∞ (—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª–∫–∏)
	entry := ""

	/*
	* —Ä–∞–±–æ—Ç–∞–µ–º —Å –≤–∏–∂–¥–µ—Ç–æ–º:
	* –†–µ–Ω–¥–µ—Ä–∏–º, —Å—Ç–∞–≤–∏–º Placeholder, –≤–µ—à–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–π
	 */
	entryDisplay := widget.NewEntry()
	entryDisplay.SetPlaceHolder("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
	entryDisplay.OnChanged = func(text string) {
		entry = text
	}

	valueDisplay := widget.NewLabel("")

	// –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
	buttonPad := fyne.NewContainerWithLayout(layout.NewGridLayout(5))

	// –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–æ—á–∫–∏ 1-9
	for i := 1; i < 10; i++ {
		buttonPad.AddObject(BtnEvent(fmt.Sprint(i), &entry, entryDisplay))
	}
	buttonPad.AddObject(BtnEvent("0", &entry, entryDisplay))

	btns := []string{"+", "-", "/", "*", "%", "(", ")", "^", "<", ">"}

	// –∫–Ω–æ–ø–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
	for i := range btns {
		buttonPad.AddObject(BtnEvent(btns[i], &entry, entryDisplay))
	}
	// –û—à–∏–±–∫–∏ (—É—á–∏–º –∫–∞–ª—å–∫—É–ª–µ–π—Ç–æ—Ä —Ä—É–≥–∞—Ç—å—Å—è)
	errz := []string{"–ê–ê–ê–ê, –û–®–ò–ë–ö–û –ú–ê–ù–ê–ú–ê!(x_x)", "–¢—ã –¥–µ–±–∏–ª?", "–ß—Ç–æ —Ç—ã –Ω–µ—Å–µ—à—å?", "–Ø –æ—Ç–∫–∞–∑—ã–≤–∞—é—Å—å —ç—Ç–æ —Å—á–∏—Ç–∞—Ç—å", "–°—á–∏—Ç–∞–π —Å–∞–º, —è –≤ –æ—Ç–ø—É—Å–∫–µ", "–°—á–∏—Ç–∞–π —Å–∞–º"}

	// –§—É–Ω–∫—Ü–∏—è "=", –ø–æ—Å—á–∏—Ç–∞–µ—Ç —á—Ç–æ —É–≥–æ–¥–Ω–æ, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—Ç üòéü§ñüëæ
	enter := widget.NewButton("=", func() {
		swear, err := govaluate.NewEvaluableExpression(entry)
		//
		if err != nil {
			valueDisplay.SetText(errz[rand.Intn(len(errz))])
			log.Printf(`–í—ã –Ω–µ –Ω—Ä–∞–≤–∏—Ç–µ—Å—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É...
	–û–Ω –≥–æ–≤–æ—Ä–∏—Ç - "%s"`, errz[rand.Intn(len(errz))])
			return
		}
		value, err := swear.Evaluate(nil)
		if err != nil {
			valueDisplay.SetText(errz[rand.Intn(len(errz))])
			return
		}
		valueDisplay.SetText(fmt.Sprint(value))
	})

	// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—è –≤–æ–æ–¥–∞ (—Å —Ñ–æ—Ä–º—É–ª–∫–∞–º–∏, —Ç–æ —Å–∞–º–æ–µ =))
	clear := widget.NewButton("AC", func() {
		entry = ""
		entryDisplay.SetText(entry)
		valueDisplay.SetText("")
	})

	// –û—Ç–¥–µ–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø—É—à–∫–µ –º–µ–Ω—é (–û—á–∏—Å—Ç–∏—Ç—å –∏ =)
	submitPad := fyne.NewContainerWithLayout(layout.NewGridLayout(2))
	submitPad.AddObject(clear)
	submitPad.AddObject(enter)

	// –≤–æ–ª—à–µ–±–Ω–∞—è –∫–æ—Ä–æ–±–æ—á–∫–∞ —Å –≤–∏–¥–∂–µ—Ç–∞–º–∏
	w.SetContent(widget.NewVBox(
		entryDisplay,
		valueDisplay,
		buttonPad,
		submitPad,
	))
	// 3... 2... 1... GO!
	// OKAAAAAAAAAAY LET's goooooo
	w.ShowAndRun()
}

// –û–±—Ä–∞–±–æ—Ç–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø—É—à–∫–∏
func BtnEvent(mod string, entry *string, entryDisplay *widget.Entry) *widget.Button {
	button := widget.NewButton(mod, func() {
		*entry += mod
		entryDisplay.SetText(*entry)

	})
	return button
}

// –°–æ–¥–∞–µ–º log —Ñ–∞–π–ª
func logger(f string) {
	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é "logs"
	if _, err := os.Stat("logs"); errors.Is(err, os.ErrNotExist) {
		if e := os.Mkdir("logs", os.ModePerm); e != nil {
			log.Fatal(e)
		}
	}
	// –°–æ–∑–¥–∞–µ–º log —Ñ–∞–π–ª, –ø–∏—à–µ–º —Ç—É–¥–∞ –ª–æ–≥–∏
	file, err := os.OpenFile(f, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0666)
	if err != nil {
		log.Fatal(err)
	}
	log.SetOutput(file)
	log.Printf("[INFO] Logs are written to file %s", f)
}
